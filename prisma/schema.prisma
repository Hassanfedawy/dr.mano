datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?
  phoneNumber     String?   @unique
  shippingAddress String?
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(USER)
  accounts        Account[]
  sessions        Session[]
  reviews         Review[]
  orders          Order[]
  cart            Cart?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  mainDescription   String
  subDescription    String
  price             Float
  originalPrice     Float?      // Original price before discount
  discountPercentage Int?       // Discount percentage (e.g., 40 for 40% off)
  images            String?
  link              String?     // Optional external link for the product
  stock             Int         @default(0)
  categoryId        String?     @db.ObjectId
  category          Category?   @relation(fields: [categoryId], references: [id])
  variants          Variant[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  name      String
  sku       String   @unique
  price     Float?
  stock     Int      @default(0)
  options   Json
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int      @default(5)
  comment   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?    @db.ObjectId
  guestId   String?    // Cookie-based ID for guest carts
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
  @@unique([guestId])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?     @db.ObjectId
  guestId         String?     // Cookie-based ID for guest orders
  guestEmail      String?     // Email for guest orders
  guestName       String?     // Name for guest orders
  status          OrderStatus @default(PENDING)
  total           Float
  shippingAddress String
  paymentMethod   String
  phoneNumber     String?     // Added phone number field (optional)
  items           OrderItem[]
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}